# 덕성 학습공통체 2주차 spring



###2. 라이브러리 살펴보기
1. 라이브러리간에 의존관계

한개의 라이브러리를 불러오면 한번에 관련된 라이브러리들이 다 땡겨져 온다.
라이브러리를 빌드에서 웹서버에 올려버림.
2. 로그 출력 : 실무에서

system.out.println이 아닌 로그로 출력한다.
심각한 에러를 따로 모아보거나, 관리가 용이하다.
3. test

테스트 할 때 스프링에서 JUnit 라이브러리 쓰는데 4를 많이 쓰다가 5로 넘어가는 추세이다. 
 

###3. View 환경설정
템플릿엔진을 사용해서 View를 보여줌. 
사용자에게 렌더링해서 보여줌.
GetMapping으로 입력받고 렌더링해서 출력
1. ' resources/static/index.html'

스프링은 먼저 index.hrml을 static에서 먼저 찾는다.
2. thymeleaf 엔진사용

 

3. 웹실행

패키지 만들기 : controller
클래스 만들기 : HelloController 
클래스에 @Controller : 컨트롤러 annotation적어줌
코드 작성
 
 

###4. 빌드하고 실행하기
1. 콘솔 이동

'./gradlew duild'
'cd build/libs'
'java jar hello-spring-0.0.1_SNAPSHOT.jar  '
 


 

종료: ls -arlth
서버배포: 파일만 복사 해서 서버에 넣어주고 java -jar을 실행시키면 된다.

 

 

 

오류시

./gralew clean
ls -arlth: 빌드 폴더가 없어진다
./gralew clean build
cd build
ll
cd libs 
ll

 





























###1. 정적 컨텐츠
컨텐츠 방식의 웹개발로 파일을 그래도 내려준다.
Spring Boot는 정적 컨텐츠를 제공

1. src/main/resoutces/hello-static.html

<!DOCTYPE HTML>
<html>
<head>
    <title>static content</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
정적 컨텐츠 입니다.
</body>
</html>

 

원하는 파일을 넣으면 그대로 반환을 한다.
프로그래밍을 할  없다.

 

 

 

 

 

 

###2. MVC와 템플릿 엔진
서버를 변형 해서 HTML을 바꿔서 내려준다.
MVC: model, View, Controller
요즘은 Controller랑 View를 쪼개서 뷰를 템플릿 엔진으로 html 프로그래밍 해서 렌더링 한다.

1. Controller

비지니스 로직, 내부적인 걸 처리하는데 집중해야 한다. 
// Controller

@Controller
public class HelloController {
	@GetMapping("Hello-mvc")
    public String HelloMvc(@RequestParam("name") String name, Model model) {
    model.addAttribute("name", name);
    return "hello-template";
    }
 }
 ...

 

 

2. View

화면을 그리는데 모든 역량을 집중해야 한다. 
// resources/template/hello-teamplate.html

<html xmlns:th="http://www.thymeleaf.org">
<body>
<p th:text="'hello ' + ${name}">hello! empty</p>
</body>
</html>
...

 


 


 

 

 

 

 

 

 

 

 

 

####3. API
객체를 반환한다. 
json파일로 데이터를 전달하는 것
Vue
React
Vue.js
React
서버끼리 통신
 

1. @ResponseBody 문자변환

@Controller
public class HelloController{
	
    @GetMapping("hello-string")
    @ResponseBody
    public String helloString(@RequestParam("name") String name) {
    	return "hello " + name;
    }
}
...
@ResponseBody를 사용하면 뷰 리졸버를 사용하지 않음.
대신 HTTP의 BODY에 문자 내용을 직접 반환
2. @ResponseBody 객체 변환

@Controller
public class HelloController {
	@GetMapping("hello-api")
    @ResponseBody
    public Hello helloAip(@ReauestParm("name") String name) {
    	Hello hello = new Hello();
        hello.setName(name);
        return hello;
    }
    
    static class hello{
    	private String name;
        
        public String getName() {
        	return name;
        }
        public void setName(String name){
        	this.name = name;
        }
    }
}
 

문자가 아니라 객체를 주면, JSON방식으로 데이터를 만들어서 HTTP응답에 반환하겠다.